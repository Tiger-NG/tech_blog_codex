// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  USER
  ADMIN
}

enum PostStatus {
  DRAFT
  PUBLISHED
  ARCHIVED
}

model User {
  id             String    @id @default(cuid())
  name           String?
  email          String?   @unique
  emailVerified  DateTime?
  image          String?
  role           Role      @default(USER)
  hashedPassword String?
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt

  accounts Account[]
  sessions Session[]
  posts    Post[]
  comments Comment[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  refresh_token_expires_in Int?
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime
  createdAt  DateTime @default(now())

  @@unique([identifier, token])
}

model Post {
  id           String      @id @default(cuid())
  title        String
  slug         String      @unique
  excerpt      String?     @db.Text
  content      Json
  status       PostStatus  @default(DRAFT)
  publishedAt  DateTime?
  authorId     String
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt

  author   User       @relation(fields: [authorId], references: [id], onDelete: Cascade)
  tags     PostTag[]
  comments Comment[]
}

model Comment {
  id        String   @id @default(cuid())
  postId    String
  authorId  String?
  parentId  String?
  content   String   @db.Text
  isVisible Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  post   Post   @relation(fields: [postId], references: [id], onDelete: Cascade)
  author User?  @relation(fields: [authorId], references: [id], onDelete: SetNull)
  parent Comment? @relation("CommentThread", fields: [parentId], references: [id], onDelete: Cascade)
  replies Comment[] @relation("CommentThread")

  @@index([postId])
  @@index([authorId])
}

model Tag {
  id        Int      @id @default(autoincrement())
  name      String   @unique
  slug      String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  posts PostTag[]
}

model PostTag {
  postId String
  tagId  Int

  post Post @relation(fields: [postId], references: [id], onDelete: Cascade)
  tag  Tag  @relation(fields: [tagId], references: [id], onDelete: Cascade)

  @@id([postId, tagId])
}
